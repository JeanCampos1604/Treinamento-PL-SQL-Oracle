--VALIDAÇÃO DE HORARIO COMERCIAL ANTES DO INSERT OU DELETE 
DECLARE
  HORA VARCHAR2(2);
  H NUMBER; 
BEGIN
  H := TO_NUMBER(TO_CHAR(SYSDATE - 3/24,'HH24'));
  Dbms_Output.Put_Line(INITCAP(TO_CHAR(SYSDATE+4, 'DAY')) || '- '|| H || ' Horas');
END;

BEGIN
  IF(TO_CHAR(SYSDATE+4,'DAY') IN ('SÁBADO       ','DOMINGO       ') OR TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) NOT BETWEEN 8 AND 18) THEN
     RAISE_APPLICATION_ERROR (-20001,'Fora do Horário comercial');
  END IF;
END;

CREATE OR REPLACE TRIGGER VALIDA_HORARIO_CURSO3
BEFORE INSERT OR DELETE ON TCONTRATO2
BEGIN
  IF(TO_CHAR(SYSDATE,'D') IN (1,7) OR TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) NOT BETWEEN 8 AND 18) THEN
     RAISE_APPLICATION_ERROR (-20001,'Fora do Horário comercial');
  END IF;
END;

INSERT INTO TCONTRATO2 (COD_ALUNO, COD_CONTRATO, DATA, DESCONTO, TOTAL) VALUES (22, 12, SYSDATE, 20, 50);

DELETE TCONTRATO2
   WHERE COD_CONTRATO = 12;
   
SELECT * FROM TCONTRATO2;




--CRIAÇÃO DE LOG DEPOIS DE FAZER UPDATE NA TABELA TCONTRATO2
CREATE TABLE LOG2
(
    USUARIO VARCHAR2(30),
    HORARIO DATE,
    VALOR_ANTIGO VARCHAR2(10),
    VALOR_NOVO VARCHAR2(10)
);

CREATE OR REPLACE TRIGGER GERA_LOG_ALT2
AFTER UPDATE OF TOTAL ON TCONTRATO2
BEGIN
    INSERT INTO LOG2(USUARIO, HORARIO) VALUES (USER, SYSDATE);
END;

SELECT * FROM TCONTRATO2;

UPDATE TCONTRATO2
  SET TOTAL = 6000
  WHERE  COD_CONTRATO = 1;
  
SELECT * FROM LOG2;



--VALIDAÇÃO DE HORARIO COMERCIAL ANTES DE FAZER INSEERT, UPDATE OU DELETE
CREATE OR REPLACE TRIGGER VALIDA_HORARIO_CURSO4
BEFORE INSERT OR UPDATE OR DELETE ON TCONTRATO2
BEGIN
  IF(TO_CHAR(SYSDATE,'D') IN (1,7) OR
     TO_NUMBER(TO_CHAR(SYSDATE, 'HH24')) NOT BETWEEN 8 AND 18) THEN
    IF( INSERTING ) THEN
        RAISE_APPLICATION_ERROR(-20001, 'A tupla requirida não pode ser inserida, Fora do horário comercial!');
    ELSIF ( DELETING ) THEN
        RAISE_APPLICATION_ERROR(-20002, 'A tupla requirida não pode ser removida, Fora do horário comercial!');
    ELSIF ( UPDATING ('TOTAL') ) THEN
        RAISE_APPLICATION_ERROR(-20003, 'A coluna total não pode ser alterar, Fora do horário comercial!');
    ELSE
        RAISE_APPLICATION_ERROR(-20004, 'A tabela não pode ser alterada, Fora do horário comercial!');
    END IF;
  END IF;
END;

ALTER TRIGGER VALIDA_HORARIO_CURSO4 DISABLE;

ALTER TRIGGER VALIDA_HORARIO_CURSO4 ENABLE;

DELETE TCONTRATO2
  WHERE COD_ALUNO = 90 ;

UPDATE TCONTRATO2
 SET TOTAL = 5000
 WHERE COD_CONTRATO = 1;

INSERT INTO TCONTRATO2
  VALUES (90,SYSDATE,10,1500, NULL);
  
SELECT * FROM TCONTRATO2;


--AUDITA ALUNO DEPOIS DE FAZER INSERT,UPDATE OU DELETE LINHA A LINHA

SELECT * FROM LOG2;

ALTER TABLE LOG2 ADD OBS VARCHAR2(80);

CREATE OR REPLACE TRIGGER AUDITA_ALUNO2
AFTER INSERT OR DELETE OR UPDATE ON TALUNO2
FOR EACH ROW --EXECUTA PARA CADA LINHA AFETADA

BEGIN
    IF (DELETING) THEN
        INSERT INTO LOG2(USUARIO,HORARIO,OBS) VALUES (USER, SYSDATE, 'Linhas deletadas');
    ELSIF (INSERTING) THEN
        INSERT INTO LOG2(USUARIO,HORARIO,OBS) VALUES (USER, SYSDATE, 'Linhas inseridas');
    ELSIF (UPDATING ('SALARIO')) THEN
        INSERT INTO LOG2 VALUES (:OLD.NOME, SYSDATE, :OLD.SALARIO, :NEW.SALARIO, 'Alterando Salário');
    ELSE
        INSERT INTO LOG2(USUARIO,HORARIO,OBS) VALUES (USER,SYSDATE, 'ATUALIZAÇÃO ALUNO');

    END IF;
END;

SELECT * FROM LOG2;

TRUNCATE TABLE LOG2;

SELECT * FROM TALUNO2;

DELETE TALUNO2 WHERE COD_ALUNO = 11; 

INSERT INTO TALUNO2 VALUES (11,'Carlos','Araxá',13487521,'MG','1999','16/07/1978');



--LOG TABELA CURSO ANTES DE FAZER UPDATE
CREATE OR REPLACE TRIGGER GERA_LOG_CURSO2
BEFORE UPDATE OF VALOR ON TCURSO2
FOR EACH ROW
BEGIN
    INSERT INTO LOG2(USUARIO, HORARIO, OBS, VALOR_ANTIGO, VALOR_NOVO)
    VALUES (USER, SYSDATE, 'CURSO ALTERADO: ' || :OLD.NOME, :OLD.VALOR, :NEW.VALOR);
END;

SELECT * FROM TCURSO2 ORDER BY COD_CURSO;

UPDATE TCURSO2 
  SET VALOR = 3000
  WHERE VALOR > 2000;
  
SELECT * FROM LOG2;



--TRIGGER CALCULO DE COMISSAO ANTES DE INSERIR E FAZER UPDATE

ALTER TABLE TCONTRATO2 ADD VALOR_COMISSAO NUMERIC(8,2);


CREATE OR REPLACE TRIGGER CALC_COMISSAO2
BEFORE INSERT OR UPDATE OF TOTAL ON TCONTRATO2
REFERENCING OLD AS ANTIGO
            NEW AS NOVO
FOR EACH ROW
WHEN (NOVO.TOTAL >= 5000) --SÓ IRA SER ACIONADA QUANDO TOTAL >= 5000, CASO CONTRARIO NÃO ENTRA NA TRIGGER;  
DECLARE
  VCOMISSAO NUMBER (6,2) := 0.15;
BEGIN
  IF (:NOVO.TOTAL <= 10000) THEN
    :NOVO.VALOR_COMISSAO := :NOVO.TOTAL*(VCOMISSAO);
  ELSE
    :NOVO.VALOR_COMISSAO := :NOVO.TOTAL*(VCOMISSAO+0.01);
  END IF;
END;            

INSERT INTO TCONTRATO2 (COD_CONTRATO, TOTAL) VALUES (16, 5000);

INSERT INTO TCONTRATO2 (COD_CONTRATO, TOTAL) VALUES (17, 10000);

SELECT * FROM TCONTRATO2;

DELETE TCONTRATO2 WHERE COD_CONTRATO >= 16;



--TRIGGER + VIEW 
CREATE OR REPLACE VIEW VCONTRATOS_PARES2
AS SELECT COD_CONTRATO, DATA, COD_ALUNO, DESCONTO, TOTAL
     FROM TCONTRATO2
     WHERE MOD( COD_CONTRATO, 2) = 0;

SELECT * FROM VCONTRATOS_PARES2;

CREATE OR REPLACE TRIGGER TRI_CONTRATOS_PARES2
INSTEAD OF INSERT OR DELETE OR UPDATE ON VCONTRATOS_PARES2
DECLARE
BEGIN
    INSERT INTO LOG2(USUARIO, HORARIO, OBS) VALUES (USER, SYSDATE, 'DML DA VIEW VCONTRATOS_PARES2.');
END;

INSERT INTO VCONTRATOS_PARES2 VALUES (90, SYSDATE, 10, NULL, 5000);

SELECT * FROM LOG2;